# This level is intended to be for advanced players. The solution should be pretty complex with a lot of moving parts. It might also be a bit of a gear check unless you use "creative" methods.
# You need to make your way to the first trial (Oasis of Marr) killing enemies along the way. When you reach it, pick all the mushrooms to trigger the trial to begin. If you survive the onslaught, make your way to the next Oasis for the second trial, then the Temple. When all trials are complete you will have to face the final boss. Good luck!
# HINT: Glasses with a high visual range help tremendously on this level so buy the best you can get.
# HINT: the unit 'type' for the oasis guardians is 'oasis-guardian

def highest_damage_times_health(objects):
    max_ratio = max([float(i.attackDamage)*i.health for i in objects])
    for obj in objects:
        if max_ratio == float(obj.attackDamage)*obj.health:
            return obj

def within_radius(objects, r):
    return [i for i in objects if self.distanceTo(i) < r]        
    
def relative_pos(obj, x_shift, y_shift):
    return {'x': obj.pos.x + x_shift, 'y': obj.pos.y + y_shift} 
     
def attack_till_death(obj, enemy):
	while enemy and enemy.health > 0:
		obj.attack(enemy)        
 
def enemies_of_type(type_str):
    enemies = []    
    for enemy in self.findEnemies():
        if enemy.type == type_str:
            enemies.append(enemy)
    return enemies

def move_x_way_to(target, x):
    x_move = (target.pos.x - self.pos.x)/x
    y_move = (target.pos.y - self.pos.y)/x
    self.moveXY(self.pos.x + x_move, self.pos.y + y_move)
    
def kill_close(hits):
    #kills enemies within a radius, and according to hits necessary
    enemies = self.findEnemies()
    enemies = within_radius(enemies, self.attackRange)
    enemies = by_hits_to_kill(enemies, hits)  
    enemy = highest_damage_times_health(enemies)
    attack_till_death(self, enemy)
 
def by_hits_to_kill(enemies, hits):
    return [enemy for enemy in enemies if self.attackDamage > enemy.health] 
    
def move_and_kill_on_the_way(target, x, hits):
    if target:
    	if self.distanceTo(target) < self.attackRange:
            attack_till_death(self, target)
        else:

            kill_close(hits)
            move_x_way_to(target, x)
    	

def health_critical(portion):
    #portion gives the share 
    if self.health < self.maxHealth / portion:
        return True
    else:
        return False
def object_pos(obj):
    return obj.pos.x, obj.pos.y
    
loop:    
    item = self.findNearest(self.findItems())
    enemies = self.findEnemies()
    Thrower = enemies_of_type('thrower')   
    NearestEnemy = self.findNearest(self.findEnemies())
    enemies_25 = within_radius(enemies, 25)
    target = highest_damage_times_health(enemies_25)
   # Shmn
    flag = self.findFlag()
    
    if flag:
        x, y = object_pos(flag)
        self.moveXY(x, y)
        self.pickUpFlag(flag)
        
    if target:
        move_and_kill_on_the_way(target, 5, 1)
    elif item:
        if self.distanceTo(item) < 5:
            move_x_way_to(item, 1)
        else:
            move_x_way_to(item, 5)   
    else:
        self.shield()
        

    
